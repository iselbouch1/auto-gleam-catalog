version: '3.8'

networks:
  auto-gleam:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  storage_data:

services:
  # Database
  mysql:
    image: mysql:8.0
    container_name: auto-gleam-mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: auto_gleam
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_USER: auto_gleam
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - auto-gleam
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: auto-gleam-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auto-gleam
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5

  # Mail Testing
  mailpit:
    image: axllent/mailpit:latest
    container_name: auto-gleam-mailpit
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - auto-gleam

  # Backend Laravel
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: auto-gleam-backend
    restart: unless-stopped
    volumes:
      - ./backend:/var/www
      - storage_data:/var/www/storage/app/public
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    networks:
      - auto-gleam
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
      - "8080:8080"
    command: >
      sh -c "
      # Attendre que MySQL soit vraiment disponible
      until php artisan db:show 2>/dev/null; do
        echo 'Attente de la base de données...'
        sleep 2
      done &&
      # Copier .env si nécessaire
      if [ ! -f .env ]; then cp .env.example .env; fi &&
      # Installer les dépendances
      composer install --no-interaction --quiet &&
      # Générer la clé si nécessaire
      if [ -z \"\$(grep '^APP_KEY=' .env | cut -d'=' -f2)\" ]; then
        php artisan key:generate --force --quiet
      fi &&
      # Créer le lien de stockage
      php artisan storage:link --quiet &&
      # Lancer Reverb en arrière-plan
      php artisan reverb:start --host=0.0.0.0 --port=8080 &
      # Lancer le serveur Laravel
      php artisan serve --host=0.0.0.0 --port=8000
      "

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: auto-gleam-frontend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_BASE_URL=http://localhost/api/v1
      - VITE_USE_MOCK=false
      - VITE_PUSHER_APP_KEY=auto-gleam-app-key
      - VITE_PUSHER_HOST=localhost
      - VITE_PUSHER_PORT=8080
      - VITE_PUSHER_SCHEME=http
    networks:
      - auto-gleam
    command: npm run dev -- --host 0.0.0.0 --port 3000

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: auto-gleam-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - storage_data:/var/www/storage/app/public
    networks:
      - auto-gleam
    depends_on:
      - backend
      - frontend